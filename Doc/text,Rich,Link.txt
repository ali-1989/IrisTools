===========================================================================================================
strut style:

    https://www.woolha.com/tutorials/flutter-using-strutstyle-widget-examples
===========================================================================================================
GestureDetector(
    behavior: HitTestBehavior.translucent,
  child: Text("Click here", style: TextStyle(decoration: TextDecoration.underline, color: Colors.blue)),
  onTap: () {
    // do what you need to do when "Click here" gets clicked
  }
)
===========================================================================================================
InkWell:

InkWell(
    child: Text('${AppManager.appLocalize.getCapitalize('forgotPassword')}', )
    )

InkWell(
      child: Text('Open Browser'),
      onTap: () => launch('https://docs.flutter.io/flutter/services/UrlLauncher-class.html')
  ),
===========================================================================================================
TextSpan:

TextSpan(
      text: 'but this is',
      style: new TextStyle(color: Colors.blue),
      recognizer: new TapGestureRecognizer()
        ..onTap = () { launch('https://docs.flutter.io/flutter/services/UrlLauncher-class.html');
      },


TextSpan(
    style: bodyTextStyle.copyWith(
      color: colorScheme.primary,
    ),
    text: repoText,
    recognizer: TapGestureRecognizer()
      ..onTap = () async {
        final url = 'https://github.com/flutter/gallery/';
        if (await canLaunch(url)) {
          await launch(
            url,
            forceSafariVC: false,
          );
        }
      },
===========================================================================================================
RichText:

RichText(
    textDirection: AppThemes.textDirection,
    strutStyle: AppThemes.strutStyle,
    maxLines: 1,
    textAlign: TextAlign.start,            <<--  very importance for Rtl
    text: TextSpan( children: [
          TextSpan(text: AppManager.appLocalize.getCapitalize('startCourse') + ': ', style: state.backItemStyle1),
          TextSpan(text: '${info['startDate']}', style: state.backItemStyle2,)
          WidgetSpan(child: Icon(), style: state.backItemStyle2,)           <<-- icon
        ])
    ),
===========================================================================================================
DefaultTextStyle:

* DefaultTextStyle Widget is used to apply a default text style to its descendant widgets.
  Therefore, the DefaultTextStyle Widget must be the ascendant of the widgets where the styles would be applied.
===========================================================================================================

_launchURL() async {
    const url = 'https://google.com.br';
    if (await canLaunch(url)) {
      await launch(url);
    } else {
      throw 'Could not launch $url';
    }
  }
===========================================================================================================
auto direction:

Directionality(
textDirection: intl.Bidi.detectRtlDirectionality(text)?TextDirection.rtl : TextDirection.ltr,
child: childWidget
);







\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
TextField:

TextField(
  decoration: InputDecoration(
  hintText: "TextField B"),
  textInputAction: textInputAction2,
  onSubmitted: (_) => FocusScope.of(context).nextFocus(),
  onSubmitted: (_) => context.nextEditableTextFocus(), // move focus to next
),

TextField(
  decoration: InputDecoration(
  hintText: "TextField C"),
  textInputAction: textInputAction3,
  onSubmitted: (_) => FocusScope.of(context).unfocus(), // submit and hide keyboard


 extension Utility on BuildContext {
   void nextEditableTextFocus() {
     do {
       FocusScope.of(this).nextFocus();
     } while (FocusScope.of(this).focusedChild.context.widget is! EditableText);
   }
 }
 --------------------------------------------
 children: <Widget>[
 TextField(
   decoration: InputDecoration(hintText: "TextField A"),
   textInputAction: TextInputAction.next,
   onSubmitted: (_) => FocusScope.of(context).nextFocus(), // move focus to next
 ),

 TextField(
   decoration: InputDecoration(hintText: "TextField B"),
   textInputAction: TextInputAction.next,
   onSubmitted: (_) => FocusScope.of(context).nextFocus(), // move focus to next
 ),

 TextField(
   decoration: InputDecoration(hintText: "TextField C"),
   textInputAction: TextInputAction.done,
   onSubmitted: (_) => FocusScope.of(context).unfocus(), // submit and hide keyboard
 ),
       ],

-----------------------------------------------------------------
void focusNextTextField(BuildContext context) {
  do {
    var foundFocusNode = FocusScope.of(context).nextFocus();
    if (!foundFocusNode)
     return;
  }
   while (FocusScope.of(context).focusedChild.context.widget is! EditableText);
}
===========================================================================================================
Multi line:

Widget _buildTextField() {
  final maxLines = 5;

  return Container(
    margin: EdgeInsets.all(12),
    height: maxLines * 24.0,
    child: TextField(
      maxLines: maxLines,
      decoration: InputDecoration(
        hintText: "Enter a message",
        fillColor: Colors.grey[300],
        filled: true,
      ),
    ),
  );
}
===========================================================================================================
* height control:

isCollapsed: true,                  //is importance for reduce height
contentPadding: EdgeInsets.all(2)
prefixIconConstraints: BoxConstraints.loose(Size(double.infinity,20)),
maxLines: 1,


decoration: state.inputDecode.copyWith(
  hintText: '${AppManager.appLocalize.get('mobile')}',
  isCollapsed: true,
  contentPadding: EdgeInsets.symmetric(horizontal: 2, vertical: 20),
  prefixIcon:Padding(
    padding: EdgeInsets.symmetric(horizontal: 4, vertical: 4),
    child: Text("${state.selectedCountryCode}"),
  ),
  prefixIconConstraints: BoxConstraints.loose(Size(double.infinity, 20)),
),
===========================================================================================================




\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
======================= samples =========================================
\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/

label on border:

TextField(
      controller: _newTextEditingController,
      maxLines: 5,
      onChanged: (string) {
        setState(() {});
      },
      decoration: InputDecoration(
        labelText: "New Text",
        fillColor: Colors.white,
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(10.0),
        ),
      ),

===============================================================================
TextField(
      key: inputKey,
      focusNode: focusNode,
      controller: controller,
      textAlign: widget.center ? TextAlign.center : TextAlign.start,
      textInputAction: TextInputAction.search,
      textAlignVertical: TextAlignVertical.center,
      decoration: InputDecoration(
        border: OutlineInputBorder(
          borderSide: BorderSide(style: BorderStyle.none),
          gapPadding: 0.0,
        ),
        focusedBorder: OutlineInputBorder(
          borderSide: BorderSide(style: BorderStyle.none),
          gapPadding: 0.0,
        ),
        focusedErrorBorder: OutlineInputBorder(
          borderSide: BorderSide(style: BorderStyle.none),
          gapPadding: 0.0,
        ),
        enabledBorder: OutlineInputBorder(
          borderSide: BorderSide(style: BorderStyle.none),
          gapPadding: 0.0,
        ),
        disabledBorder: OutlineInputBorder(
          borderSide: BorderSide(style: BorderStyle.none),
          gapPadding: 0.0,
        ),
        errorBorder: OutlineInputBorder(
          borderSide: BorderSide(style: BorderStyle.none),
          gapPadding: 0.0,
        ),
        contentPadding: EdgeInsets.all(0),
        isDense: true,
      ),
      style: style,
      cursorColor: widget.cursorColor,
      cursorWidth: widget.cursorWidth,
      cursorRadius: Radius.circular(widget.cursorRadius),
      onSubmitted: widget.onSearch,
      onTap: () {
        widget.onTap?.call();
        if (!widget.enable) {
          focusNode.unfocus();
        }
      },
    );

=========================================================================================================
Stack(

          children: [


            Column(
              children: [
                SizedBox(height: 10,),
                DecoratedBox(
                    decoration: BoxDecoration(border: Border.all(color: Colors.black)),
                  child: Padding(
                    padding: const EdgeInsets.all(12.0),
                    child: Column(
                      children: [
                        Text('gggg'),
                        Text('gggg'),
                        Text('gggg'),
                        Text('gggg'),
                      ],
                    ),
                  ),
                ),
              ],
            ),

            Align(
                heightFactor: 1.0,
              alignment: FractionalOffset(0.95, 1),
              child: DecoratedBox(
                decoration: BoxDecoration(color: Colors.green),
                child: Text('title'),
              )
            )
          ],
        )