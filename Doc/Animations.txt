=======================================================================================================
Help:

    flutter.dev/docs/development/ui/animations/tutorial
    https://flutter.dev/docs/development/ui/animations    :which use animation
=======================================================================================================
@override
  Widget build(BuildContext context) {
    if (widget.animate && widget.delay.inMilliseconds == 0) {
      controller?.forward();
    }

    return AnimatedBuilder(
        animation: controller,
        builder: (BuildContext context, Widget child) {
          return Transform.scale(
            scale: bouncing.value,
            child: Opacity(
              opacity: opacity.value,
              child: widget.child,
            ),
          );
        });
  }
=======================================================================================================
Widgets:

Link:
    https://flutter.dev/docs/development/ui/widgets/animation
    https://flutter.dev/docs/development/ui/animations
    https://flutter.dev/docs/cookbook/animation/physics-simulation
--------------------------------------------
Explicit:  صریح، روشن، واضح

extends as AnimatedWidget:

SlideTransition()
AlignTransition()
FadeTransition()
RotationTransition()
ScaleTransition()
SizeTransition()
PositionedTransition()
RelativePositionedTransition()
DecoratedBoxTransition()
DefaultTextStyleTransition()

AnimatedWidget
StatusTransitionWidget
AnimatedBuilder
--------------------------------------------
Implicit:  بی شرط، ضمنی

extends as ImplicitlyAnimatedWidget:

AnimatedAlign
AnimatedContainer
AnimatedCrossFade
AnimatedSwitcher
AnimatedDefaultTextStyle
AnimatedOpacity
AnimatedPositioned
AnimatedPositionedDirectional
AnimatedPadding
AnimatedSize
AnimatedThemeSize
AnimatedPhysicalModel
Hero

DecoratedBoxTransition
AnimatedWidgetBaseState
AnimatedListState
AnimatedModalBarrier
TweenAnimationBuilder
=======================================================================================================
Tween:  (between)

tween = Tween<double>(begin: -200, end: 0);
tween = ColorTween(begin: Colors.transparent, end: Colors.black54);
tween = CurveTween(curve: Curves.bounceIn));
tween = IntTween(begin: 0, end: 255);

* controller = AnimationController(duration: const Duration(seconds: 2), vsync: this);
* animation = CurvedAnimation(parent: controller, curve: Curves.easeIn);
* Animation<int> customTween = IntTween(begin: 0, end: 255).animate(controller);
=======================================================================================================
Custom Curve:

class ShakeCurve extends Curve {
  @override
  double transform(double t) => sin(t * pi * 2);
}

=======================================================================================================
Samples:

AnimationController controller = AnimationController(duration: const Duration(milliseconds: 500), vsync: this);
Animation<int> alpha = IntTween(begin: 0, end: 255).animate(controller);
--------------------------------------------------
AnimationController controller = AnimationController(duration: const Duration(milliseconds: 500), vsync: this);
Animation curve = CurvedAnimation(parent: controller, curve: Curves.easeOut);
Animation<int> alpha = IntTween(begin: 0, end: 255).animate(curve);
--------------------------------------------------
=======================================================================================================
=======================================================================================================
Fade custom:

class MyFadeTest extends StatefulWidget {
  MyFadeTest({Key key, this.title}) : super(key: key);

  final String title;

  @override
  MyFadeTest createState() => MyFadeTest();
}

class MyFadeTest extends State<MyFadeTest> with TickerProviderStateMixin {
  AnimationController controller;
  CurvedAnimation curve;

  @override
  void initState() {
    controller = AnimationController(duration: const Duration(milliseconds: 2000), vsync: this);
    curve = CurvedAnimation(parent: controller, curve: Curves.easeIn);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
      ),

      body: Center(
        child: Container(
          child: FadeTransition(
            opacity: curve,
            child: FlutterLogo(
              size: 100.0,
            )
          )
        )
      ),

      floatingActionButton: FloatingActionButton(
        tooltip: 'Fade',
        child: Icon(Icons.brush),
        onPressed: () {
          controller.forward();
        },
      ),
    );
  }

  @override
  dispose() {
    controller.dispose();
    super.dispose();
  }
=======================================================================================================
class LogoAnimation extends StatefulWidget {
	_LogoAnimationState createState() => _LogoAnimationState();
}

class _LogoAnimationState extends State<LogoAnimation> with SingleTickerProviderStateMixin {
	Animation<double> animation;
	AnimationController controller;

	@override
    void initState() {
        super.initState();
        controller = AnimationController(duration: const Duration(seconds: 2), vsync: this);
        opacityAnimation = Tween<double>(begin: 0.1, end: 1.0).chain(CurveTween(curve: Curves.bounceIn)).animate(controller);
        sizeAnimation = Tween<double>(begin: 10, end: 150).chain(CurveTween(curve: Curves.bounceIn)).animate(controller);

        controller.addListener(() {
                setState(() {});
            });

        controller.addStatusListener((status) {
                if(status == AnimationStatus.completed) {
                    controller.reverse();
                }
                if(status == AnimationStatus.dismissed) {
                    controller.forward();
                }
            });

        controller.forward();
    }

    @override
    Widget build(BuildContext context) {
        return Center(
            child: Container(
                margin: EdgeInsets.symmetric(vertical: 10),
                child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    children: [
                        Container(
                            margin: EdgeInsets.symmetric(vertical: 10),
                            height: sizeAnimation.value,
                            width: sizeAnimation.value,
                            child: FlutterLogo(),
                        ),
                    Container(
                        margin: EdgeInsets.symmetric(vertical: 10),
                        height: sizeAnimation.value,
                        width: sizeAnimation.value,
                        child: Opacity(
                            opacity: opacityAnimation.value,
                            child: FlutterLogo(),
                        )
                    ),
                        Container(
                                margin: EdgeInsets.symmetric(vertical: 10),
                                height: 150,
                                width: 150,
                                decoration: BoxDecoration(),
                                child: FadeTransition(
                                    opacity: opacityAnimation,
                                    child: FlutterLogo(),
                                )
                        ),
                ],
            ),
        )
        );
    }

    @override
    void dispose() {
        controller.dispose();
        super.dispose();
    }
}
=======================================================================================================
MorphAnimation:

class _MorphAnimationState extends State<MorphAnimation> {
	Color color;
	double borderRadius;
	double margin;

	@override
	void initState() {
		super.initState();
		color = Colors.deepPurple;
		borderRadius = randomBorderRadius();
		margin = randomMargin();
	}

	void change() {
		color = randomColor();
		borderRadius = randomBorderRadius();
		margin = randomMargin();

		setState(() {});
	}

	@override
	Widget build(BuildContext context) {
		return Scaffold(
			body: Center(
				child: Column(
					children: <Widget>[
						SizedBox(
							width: 128,
							height: 128,
							child: AnimatedContainer(
								margin: EdgeInsets.all(margin),
								decoration: BoxDecoration(
									color: color,
									borderRadius: BorderRadius.circular(borderRadius),
								),
								duration: Duration(seconds: 1),
							),
						),
						MaterialButton(
							color: Theme.of(context).primaryColor,
							child: Text(
								'change',
								style: TextStyle(color: Colors.white),
							),
							onPressed: () => change(),
						),
					],
				),
			),
		);
	}
}

class MyApp extends StatelessWidget {
	@override
	Widget build(BuildContext context) {
		return MaterialApp(
			debugShowCheckedModeBanner: false,
			home: MorphAnimation(),
		);
	}
}
=================================================================================================================
AnimatedSwitcher:

AnimatedSwitcher(
      duration: Duration(milliseconds: 500),
      reverseDuration: Duration(milliseconds: 200),
      switchInCurve: Curves.fastLinearToSlowEaseIn,
      switchOutCurve: Curves.fastOutSlowIn,
      child: flag? w1: w2,
      transitionBuilder: (Widget child, Animation<double> animation) {
        return ScaleTransition(child: child, scale: animation,);
      },
    ),
=================================================================================================================
AnimatedCrossFade:

AnimatedCrossFade(
  duration: Duration(milliseconds: 400),
  crossFadeState: CrossFadeState.showSecond, //after animation
    alignment: Alignment.center,
    firstChild: (widget.shape == null)? getFirstViewForFade() : getClipView(getFirstViewForFade()),
    secondChild: (widget.shape == null)? getImage() : getClipView(getImage()),
);
=================================================================================================================