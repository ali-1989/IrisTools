===============================================================================================

    https://medium.com/flutterdevs/gridview-list-widget-in-flutter-1ee34010b866


* crossAxisSpacing: The crossAxisSpacing use to specify the number of pixels between
 widgets to all the children listed in the cross axis.

* crossAxisCount: It is used to specify the number of columns in a grid view.
* mainAxisSpacing: The crossAxisSpacing use to specify the number of pixels
 between widgets to all the children listed in the main axis.
===============================================================================================
GridView.count():

* It is the most frequently used grid layout because here, we already know the grid's size.

- crossAxisCount: It is used to specify the number of columns in a grid view.
- crossAxisSpacing: It is used to specify the number of pixels between each child widget listed in
  the cross axis.
- mainAxisSpacing: It is used to specify the number of pixels between each child widget listed in the main axis.
- padding: It is used to specify the space around the whole list of widgets.
- scrollDirection: It is used to specify the direction in which the items on GridView scrolls.
- reverse: If it is true, it will reverse the list in the opposite direction along the main axis.


GridView.count(
    scrollDirection: Axis.vertical,
    crossAxisCount: 3,
    reverse: false,
    shrinkWrap: true,
    mainAxisSpacing: 5,
    crossAxisSpacing: 5,
    childAspectRatio: 2/1,
    children: List.generate(choices.length, (index) {
      return Center(
        child: SelectCard(choice: choices[index]),
      );
    }
   )
)
===============================================================================================
GridView.builder():

* is used when we want to display data dynamically or on-demand. In other words, if the user wants to create
  a grid with a large (infinite) number of children.

- itemCount: It is used to define the amount of data to be displayed.
- gridDelegate: It determines the grid or its divider. Its argument should not be null.
- itemBuilder: It is used to create items that will be displayed on the grid view.
   It will be called only when the indices >= zero && indices < itemCount.


GridView.builder(
  itemCount: images.length,
  gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
      crossAxisCount: 2,
      crossAxisSpacing: 4.0,
      mainAxisSpacing: 4.0
  ),
  itemBuilder: (BuildContext context, int index){
    return Image.network(images[index]);
  },
)),
------------------------------------------------------------------
GridView.builder(
  itemCount:items.length,
  gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
      crossAxisCount: MediaQuery.of(context).orientation ==
          Orientation.landscape ? 3: 2,
      crossAxisSpacing: 8,
      mainAxisSpacing: 8,
    childAspectRatio: (2 / 1),
  ),
  itemBuilder: (context,index,) {
    return GestureDetector(
      onTap:(){
        Navigator.of(context).pushNamed(RouteName.GridViewCustom);
      },
      child:Container(
       color: RandomColorModel().getColor(),
       child: Column(
          mainAxisAlignment:MainAxisAlignment.spaceEvenly,
          children: [
            Icon(items[index].icon),
            Text(items[index].title,style: TextStyle(fontSize: 18, color: Colors.black),
                textAlign: TextAlign.center),
          ],
        ),
      ),
    );
  },
)
===============================================================================================
GridView.extent():

* This property is used when we want to create a grid with custom extent values.
  It means each tile has a maximum cross-axis extent.


GridView.extent(
    primary: false,
    padding: const EdgeInsets.all(16),
    crossAxisSpacing: 10,
    mainAxisSpacing: 10,
    maxCrossAxisExtent: 200.0,
    children: <Widget>[
      Container(
        padding: const EdgeInsets.all(8),
        child: const Text('First', style: TextStyle(fontSize: 20)),
        color: Colors.yellow,
      ),
      Container(
        padding: const EdgeInsets.all(8),
        child: const Text('Second', style: TextStyle(fontSize: 20)),
        color: Colors.blue,
      ),
  );
===============================================================================================
Fix height:

GridView.builder(
    shrinkWrap: true,
    itemCount: list.length,
    gridDelegate: SliverGridDelegateWithFixedCrossAxisCountAndFixedHeight(
        crossAxisCount: 5,
        crossAxisSpacing: 5,
        mainAxisSpacing: 5,
        height: 48.0, //48 dp of height

===============================================================================================


*****************************************************************************************************




StaggeredGridView:

    https://medium.com/flutterdevs/staggered-gridview-in-flutter-661f6667595d

===============================================================================================
StaggeredGridView.countBuilder(
    crossAxisCount: 2,
    crossAxisSpacing: 10,
    mainAxisSpacing: 12,
    itemCount: imageList.length,
    itemBuilder: (context, index) {
    },
   ),
===============================================================================================
