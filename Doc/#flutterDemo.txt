=======================================================================================================
original google system:

home: MyHomePage(title: 'Flutter Demo Home Page'),

class MyHomePage extends StatefulWidget {
  MyHomePage({Key key, this.title}) : super(key: key);

  final String title;

  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _counter = 0;

  void _incrementCounter() {
    setState(() {
      _counter++;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
      ),

      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'You have pushed -- the button this many times:',
            ),
            Text(
              '$_counter',
              style: Theme.of(context).textTheme.headline4,
            ),
          ],
        ),
      ),
	  
      floatingActionButton: FloatingActionButton(
        onPressed: _incrementCounter,
        tooltip: 'Increment',
        child: Icon(Icons.add_call),
      ), // This trailing comma makes auto-formatting nicer for build methods.
    );
  }
}
====================================================================================================
Hack:


class Hack2 extends StatefulWidget{
	Hack2();

  @override
  State<StatefulWidget> createState() {
    return Hack2State();
  }
}

class Hack2State extends State<Hack2> {
	Future<dynamic> ff;

	@override
	void initState() {
		super.initState();

		AppThemes.applyDefaultTheme();
		ff = AppManager.loadSettings();
	}

	@override
	Widget build(BuildContext context) {
		return FutureBuilder<dynamic>(
				initialData: false,
				future: ff,
				builder: (context, snapshot) {
					///load states
					print('&&&&&&&&&&&: ${snapshot.data}');
					switch (snapshot.connectionState) {
						case ConnectionState.none:
						case ConnectionState.active:
							print('non-active');
							return Container();
							break;
						case ConnectionState.waiting:
							print('waite');
							return Center(
									child: Container(
											width: 150,
											height: 150,
											child: CircularProgressIndicator()
									)
							);
							break;
						case ConnectionState.done:
							print('done');
							if (snapshot.hasError) {
								return Text('Error: ${snapshot.error}',
									style: TextStyle(color: Colors.red, fontSize: 25, fontWeight: FontWeight.bold),);
							} else {
								return getByNewSettingManager();
							}
							break;
						default:
							print('def');
							return Container();
					}
				});
	}
}
///=============================================================================================================



